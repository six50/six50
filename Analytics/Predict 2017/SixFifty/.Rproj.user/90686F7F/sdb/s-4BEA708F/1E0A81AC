{
    "collab_server" : "",
    "contents" : "# Swingometer\n#\n# Currently this is just an R script but may be transitioned to a R Package if the size of the work\n# requires it. Currently does a rudimentary analysis of the data\n\nlibrary(data.table)\nlibrary(ggplot2)\nlibrary(GGally)\n\n# Import the data\nge.results.2015 <- fread(\"../../2015-UK-general-election-data-results-WEB/RESULTS FOR ANALYSIS.csv\")\nref.results <- fread(\"../../EU-referendum-result-data.csv\")\nconst.info <- fread(\"../../2015-UK-general-election-data-results-WEB/CONSTITUENCY.csv\")\n\n# Some quick cleaning tools\nstringToInt <- function(number) {\n  as.numeric(gsub(number, pattern = \",\", replacement = \"\"))\n}\n\n# Convert string to int\nto.convert <- c(\"Electorate\", \"Total number of valid votes counted\")\nge.results.2015 <- ge.results.2015[, (to.convert) := lapply(.SD, stringToInt), .SDcols = to.convert]\n\ninteger.fields <- names(which(sapply(ge.results.2015, is.integer)))\nremove.na <- function (x) {\n  x[is.na(x)] <- 0\n  x\n}\nge.results.2015[, (integer.fields) := lapply(.SD, remove.na), .SDcols = integer.fields]\n\nnumeric.cols <- names(ref.results)[-c(2:5)]\nref.results <- ref.results[, (numeric.cols) := lapply(.SD, as.numeric), .SDcols = numeric.cols]\n\n# Get EU result by region\neu.by.region <- split(ref.results, ref.results$Region)\neu.by.region <- lapply(eu.by.region,\n                        function (x) {c(Remain = sum(x$Remain),\n                                        Leave = sum(x$Leave),\n                                        Total = sum(x$Valid_Votes))})\n\n# Calculate the percentage remain by region\npc.remain <- sapply(eu.by.region, function(x) x[\"Remain\"]/x[\"Total\"])\nnames(pc.remain) <- names(eu.by.region)\n\n# Ad the remain result to the table\nge.results.2015[, Vote_Remain_Pct := pc.remain[ge.results.2015$Region]]\n\n# Get the percentage of votes by party\nkey.party.cols <- c(\"LD\", \"C\", \"Lab\")\npc.v.names <- paste0(key.party.cols, \"_PC_Vote\")\ngetPercentage <- function(x) {x/ge.results.2015$`Total number of valid votes counted`}\n\n# Update the table accodingly\nge.results.2015[, (pc.v.names) := lapply(.SD, getPercentage), .SDcols = key.party.cols]\nge.results.2015[, OTHER_PC_VOTE :=  1 - apply(ge.results.2015[, pc.v.names, with = F],1,sum, na.rm = T)]\n\n# Update meta\nkey.party.cols <- c(key.party.cols, \"OTHER\")\npc.v.names <- c(pc.v.names, \"OTHER_PC_VOTE\")\n\n# Calculate the distance each constituency is from the mean\ndis.mean <- paste0(key.party.cols, \"_DIFF_MEAN\")\ngetDistanceFromMean <- function(x) {x - mean(x, na.rm = T)}\nge.results.2015[, (dis.mean) := lapply(.SD, getDistanceFromMean), .SDcols = pc.v.names]\n\n# Test polling numbers (as of 20th of April 2010)\ntest.polling.numbers <- c(0.10, 0.44, 0.26)\ntest.polling.numbers <- c(test.polling.numbers, 1 - sum(test.polling.numbers))\nnames(test.polling.numbers) <- key.party.cols\n\n# Function which gets the winner (based on index)\ngetWinner <- function(dist.figs, polling.nums) {\n  key.party.cols[which.max(polling.nums + as.vector(dist.figs))]\n}\n\ngetPercentage <- function(dist.figs, polling.nums) {\n  polling.nums + as.vector(dist.figs)\n}\n\n# Calculate the percentages by constituency\npercentages <- t(apply(ge.results.2015[,dis.mean, with = F], 1,\n                     getPercentage, polling.nums = test.polling.numbers))\n\n# Get the predictions\npredictions <- data.table(constituency = ge.results.2015$`Constituency Name`,\n                          winner = factor(apply(ge.results.2015[,dis.mean, with = F], 1,\n                                                               getWinner, polling.nums = test.polling.numbers)),\n                          LD_RESULT = percentages[,\"LD\"], C_RESULT = percentages[,\"C\"],\n                          Lab_RESULT = percentages[,\"Lab\"], OTHER_RESULT = percentages[,\"OTHER\"])\n\n# Create a quick plot\nggpairs(ge.results.2015[, c(\"Vote_Remain_Pct\", pc.v.names), with = F])\n\n# Write the prediction to csv\nwrite.csv(x = predictions,file =  \"../../predictions.csv\", row.names =F)\n",
    "created" : 1492595366394.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4053841570",
    "id" : "1E0A81AC",
    "lastKnownWriteTime" : 1492771679,
    "last_content_update" : 1492771686203,
    "path" : "~/Documents/Political Data/Predict 2017/SixFifty/R/Swingometer.R",
    "project_path" : "R/Swingometer.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}